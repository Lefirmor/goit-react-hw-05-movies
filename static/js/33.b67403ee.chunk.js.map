{"version":3,"file":"static/js/33.b67403ee.chunk.js","mappings":"+LAEaA,E,QAAaC,EAAAA,IAAH,8F,SCCVC,EAAS,WACpB,OACE,SAACF,EAAD,WACE,SAAC,KAAD,CACEG,OAAO,MACPC,MAAM,MACNC,MAAM,QACNC,UAAU,YACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,EACTC,eAAe,GACfC,gBAAgB,GAChBC,cAAc,MAIrB,C,uJCjBYC,EAAsBZ,EAAAA,GAAAA,IAAH,sHAOnBa,EAAWb,EAAAA,GAAAA,IAAH,4CAIRc,EAAQd,EAAAA,GAAAA,GAAH,4CAILe,EAAOf,EAAAA,GAAAA,GAAH,gHAQJgB,GAAWhB,EAAAA,EAAAA,IAAOiB,EAAAA,GAAPjB,CAAH,oG,SC0DrB,EAxEqB,WACnB,IAAQkB,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,YAAlC,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAUC,EAAAA,EAAAA,MAAVD,MACFE,GAAeC,EAAAA,EAAAA,QAAiB,OAAVH,EAAiB,IAAMA,EAAMI,MAkBzD,OAhBAC,EAAAA,EAAAA,YAAU,WACRN,GAAa,GAEbO,MAAM,sCAAD,OACmCb,EADnC,6DAGFc,MAAK,SAAAC,GAAG,OAAIA,EAAIC,MAAR,IACRF,MAAK,SAAAG,GACJb,EAAaa,GACbX,GAAa,GACTW,EAAOC,gBACTd,GAEH,GACJ,GAAE,CAACJ,KAGF,iCACE,SAACF,EAAD,CAAUqB,GAAIV,EAAaW,QAA3B,0CAGCf,IAAa,SAACtB,EAAA,EAAD,IACboB,GACC,iCACE,UAACT,EAAD,YACE,SAACC,EAAD,CACE0B,IAAG,yCAAoClB,EAAUmB,aACjDC,IAAI,MAEN,4BACE,SAAC3B,EAAD,oBAAWO,EAAUqB,MAArB,aAA+BrB,EAAUsB,aAAzC,QACA,wCAAgBC,KAAKC,KAA8B,GAAzBxB,EAAUyB,cAApC,QACA,sCACA,uBAAIzB,EAAU0B,YACd,oCACA,SAAChC,EAAD,UACGM,EAAU2B,QACT3B,EAAU2B,OAAOC,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OACnB,wBAAgBA,GAAPA,EADU,aAM7B,oDAEA,UAACnC,EAAD,YACE,yBACE,SAAC,KAAD,CAAMsB,GAAE,OAAR,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAE,UAAR,2BAIJ,SAAC,EAAAc,SAAD,CAAUC,UAAU,gDAApB,UACE,SAAC,KAAD,UAIJ,4EAIP,C","sources":["components/Loader/Loader.styled.js","components/Loader/Loader.jsx","pages/MovieDetails/MovieDetails.styled.js","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const LoaderIcon = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import { LineWave } from 'react-loader-spinner';\nimport { LoaderIcon } from './Loader.styled';\n\nexport const Loader = () => {\n  return (\n    <LoaderIcon>\n      <LineWave\n        height=\"150\"\n        width=\"150\"\n        color=\"black\"\n        ariaLabel=\"line-wave\"\n        wrapperStyle={{}}\n        wrapperClass=\"\"\n        visible={true}\n        firstLineColor=\"\"\n        middleLineColor=\"\"\n        lastLineColor=\"\"\n      />\n    </LoaderIcon>\n  );\n};\n","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const MovieDetailsSection = styled.div`\n  padding-bottom: 20px;\n  display: flex;\n  gap: 15px;\n  border-bottom: 1px solid #c4c4c4;\n`;\n\nexport const MovieImg = styled.img`\n  max-width: 30vw;\n`;\n\nexport const Title = styled.h1`\n  font-size: 22px;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  list-style: none;\n  flex-wrap: wrap;\n  gap: 10px;\n  padding: 0;\n`;\n\nexport const BackLink = styled(Link)`\n  padding-bottom: 8px;\n  display: inline-block;\n  /* cursor: pointer; */\n`;\n","import { Suspense } from 'react';\nimport { Loader } from 'components/Loader/Loader';\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport {\n  MovieDetailsSection,\n  Title,\n  List,\n  MovieImg,\n  BackLink,\n} from './MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movieInfo, setMovieInfo] = useState();\n  const [isLoading, setIsLoading] = useState(false);\n  const { state } = useLocation();\n  const backLinkHref = useRef(state === null ? '/' : state.from);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    fetch(\n      `https://api.themoviedb.org/3/movie/${movieId}?api_key=2ead4d55a2c7da4f5313610b563685be&language=en-US`\n    )\n      .then(res => res.json())\n      .then(result => {\n        setMovieInfo(result);\n        setIsLoading(false);\n        if (result.status_message) {\n          setMovieInfo();\n        }\n      });\n  }, [movieId]);\n\n  return (\n    <>\n      <BackLink to={backLinkHref.current}>\n        &#8592; Back to previous page\n      </BackLink>\n      {isLoading && <Loader />}\n      {movieInfo ? (\n        <>\n          <MovieDetailsSection>\n            <MovieImg\n              src={`https://image.tmdb.org/t/p/w300${movieInfo.poster_path}`}\n              alt=\"\"\n            />\n            <div>\n              <Title>{`${movieInfo.title} (${movieInfo.release_date})`}</Title>\n              <p>User Score: {Math.ceil(movieInfo.vote_average * 10)}%</p>\n              <h2>Owerview</h2>\n              <p>{movieInfo.overview}</p>\n              <h2>Genres</h2>\n              <List>\n                {movieInfo.genres &&\n                  movieInfo.genres.map(({ name }) => (\n                    <li key={name}>{name}</li>\n                  ))}\n              </List>\n            </div>\n          </MovieDetailsSection>\n          <h3>Additional information</h3>\n\n          <List>\n            <li>\n              <Link to={`cast`}>Cast</Link>\n            </li>\n            <li>\n              <Link to={`reviews`}>Reviews</Link>\n            </li>\n          </List>\n\n          <Suspense fallback={<div>Loading subpage...</div>}>\n            <Outlet />\n          </Suspense>\n        </>\n      ) : (\n        <p>The resource you requested could not be found.</p>\n      )}\n    </>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["LoaderIcon","styled","Loader","height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","firstLineColor","middleLineColor","lastLineColor","MovieDetailsSection","MovieImg","Title","List","BackLink","Link","movieId","useParams","useState","movieInfo","setMovieInfo","isLoading","setIsLoading","state","useLocation","backLinkHref","useRef","from","useEffect","fetch","then","res","json","result","status_message","to","current","src","poster_path","alt","title","release_date","Math","ceil","vote_average","overview","genres","map","name","Suspense","fallback"],"sourceRoot":""}